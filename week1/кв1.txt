1.Во-первых, в С++ принята статистическая типизация, т.е. надо заранее объявлять типы переменных, причем типы всегда закрепляются за переменной 
(а при динамической типизации тип переменной определяется по ходу выполнения). Во-вторых, С++ компилируемый язык. Плюс такого типа языка в том, что программы работают быстрее, однако затрудняется исправление ошибок, т.к. код выполняется не построчно как в интерпретируемом языке (т.е. строчка переводится на машинный язык специальным интерпретатором и выполняется//приходит сообщение об ошибке), а вся программа сразу делается понятной для машины и запускается. Еще в С++ присутствует выравнивание, т.е. каждая переменная занимает целое число байтов памяти. 

2.
  1)Int – целочисленная переменная. 
  2)Float (4 байта) и double (8 байт) – переменные с плавающей точкой. Double отвечает за переменные с двойной точностью
  3)Bool – логические переменные true (принимает значение 1) и false (принимает значение 0)
  4)Char – тип данных для одного символа
Для того, чтобы создать составные типы данных, существуют спецификаторы short, long, signed, unsigned (например, long long int)

3. Причины:
-Разный выбор диапазонов char
-Разные кодировки в unsigned char в символах 128 – 255
-Традиционно С++ не типизирует размер того или иного типа (есть ограничения только по минимальному размеру). => в зависимости от архитектуры компьютера тип int, например, разный размер. 
-Кроме того, отсутствие установленного размера int неудобно при попытке совмещения с другими языками, где размер типов строго указан.
Решение:
-Использовать только универсальные символы типа char (с 0 – 127)
-Использовать целочисленный тип данных не доходя до лимита памяти (придерживаться среднего числа). 
-Использование псевдонимов из стандартной библиотеки с указанием размера int-а (например, uint32_t – 4 байтовый беззнаковый int).

4. Объявление сообщает компилятору, что х является переменной, а также сообщает тип этой переменной. 
Определение переменной/ функции – оно сообщает компилятору имя, тип и участок памяти, который будет занимать данная переменная. 
Присваивание значения переменной – присваиваем значение ранее объявленной переменной. Теперь, если позже мы вызовем эту переменную, то в выделенной для неё ячейки памяти будет «лежать» присвоенное ей значение.
инициализацией считается именно задание значения в определении

5. Выравнивание памяти увеличивает производительность, т.к. процессор за раз считывает определенное число «ячеек» памяти, определенное число байт. 
Следовательно, чтобы данные считывались быстрее и корректнее, необходимо, чтобы они находились в одном блоке считывания (или в целом числе блоков, если данные больше блока). 